name: CI

on:
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'

jobs:
  test:
    name: Run RSpec Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://user:password@localhost:5432/news_aggregator_test

    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true

      #Necessário forçar para evitar conflitos      
      - name: Create .env.test file
        run: |
          echo "RAILS_ENV=test" >> .env.test
          echo "POSTGRES_USER=user" >> .env.test
          echo "POSTGRES_PASSWORD=password" >> .env.test
          echo "POSTGRES_DB=news_aggregator_development" >> .env.test
          echo "POSTGRES_TEST_DB=news_aggregator_test" >> .env.test
          echo "POSTGRES_HOST=db" >> .env.test

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
          yarn install

      - name: Set up database
        run: |
          bundle exec rails db:prepare

      - name: Precompile assets
        run: bundle exec rails assets:precompile RAILS_ENV=test

      - name: Run tests
        run: bundle exec rspec

  docker_build:
    name: Build and Push Docker
    runs-on: ubuntu-latest
    needs: test 

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD_RENDER }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/news_aggregator:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/news_aggregator:latest

  deploy:
    runs-on: ubuntu-latest
    name: Build Deploy to Render
    permissions:
      deployments: write
    needs: docker_build 
    
    steps:
      - uses: actions/checkout@v4

      # Set up Ruby and Bundler for the deployment job
      - name: Set up Ruby for deploy
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true

      - name: Install dependencies for deploy
        run: |
          gem install bundler
          bundle install --deployment --without development test
          yarn install

      - name: Deploy to Render
        uses: JorgeLNJunior/render-deploy@v1.4.5
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          clear_cache: false 
          wait_deploy: true
          # github_deployment: true
          deployment_environment: 'production'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: Run migrations in production
      #   run: |
      #     bundle exec rails db:migrate RAILS_ENV=production
      #     echo "✨ Migrations completed successfully"